{"version":3,"sources":["components/RandomPassword.js","App.js","serviceWorker.js","index.js"],"names":["RandomPassword","props","state","yourNewPassword","passwordLength","includeSymbols","status","char","includeNumbers","includeLowercaseCharacters","includeUppercaseCharacters","excludeSimilarCharacters","excludeAmbiguosCharacters","message","handleChange","bind","handleSubmit","event","target","type","this","setState","id","parseInt","value","checked","randomPassword","preventDefault","num","length","arrayNum","i","ran","Math","floor","random","push","reduce","x","y","randomLength","listChar","charLength","charExclude","randomChar","charAt","indexOf","addChar","removeChar","password","item","Object","ranDomNumChar","j","split","sort","join","className","onSubmit","htmlFor","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"2UAuPeA,G,kBApPX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,gBAAiB,GACjBC,eAAgB,EAChBC,eAAgB,CACZC,QAAQ,EACRC,KAAM,4BAEVC,eAAgB,CACZF,QAAQ,EACRC,KAAM,cAEVE,2BAA4B,CACxBH,QAAQ,EACRC,KAAM,8BAEVG,2BAA4B,CACxBJ,QAAQ,EACRC,KAAM,8BAEVI,yBAA0B,CACtBL,QAAQ,EACRC,KAAM,WAEVK,0BAA2B,CACvBN,QAAQ,EACRC,KAAM,wBAEVM,QAAS,IAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAhCL,E,0EAkCNE,GACT,IAAMC,EAASD,EAAMC,OAErB,OAAQA,EAAOC,MACX,IAAK,aACDC,KAAKC,SAAL,eAAiBH,EAAOI,GAAKC,SAASN,EAAMC,OAAOM,SACnD,MACJ,IAAK,OACDJ,KAAKC,SAAL,eAAiBH,EAAOI,GAAKL,EAAMC,OAAOM,QAC1C,MACJ,IAAK,WACDJ,KAAKC,UAAS,SAAAnB,GAAK,sBACdgB,EAAOI,GADO,eAERpB,EAAMgB,EAAOI,IAFL,CAGXhB,OAAQY,EAAOO,iB,mCAQtBR,GACTG,KAAKC,SAAS,CAAER,QAAS,KACzBO,KAAKM,iBACLT,EAAMU,mB,mCAEGC,EAAKC,GAEd,IADA,IAAIC,EAAW,GACNC,EAAI,EAAGA,EAAIH,EAAKG,IACzB,CAEI,IADA,IAAIC,EAAM,EACHA,EAAM,GAAKA,EAAM,GACpBA,EAAMC,KAAKC,MAAsB,GAAhBD,KAAKE,UAE1BL,EAASM,KAAKJ,GAGlB,OADaF,EAASO,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,OAC5BV,EACJT,KAAKoB,aAAaZ,EAAKC,GAE3BC,I,iCAEAW,EAAUC,EAAYC,GAC7B,IAAMC,EAAaH,EAASI,OAAOZ,KAAKC,MAAMD,KAAKE,SAAWO,IAC9D,OAAIC,EAAYd,OAAS,IAA0C,IAArCc,EAAYG,QAAQF,GACvCxB,KAAKwB,WAAWH,EAAUC,EAAYC,GAC1CC,I,uCAGP,IAAIG,EAAU,GACVC,EAAa,GACbC,EAAW,GACf,IAAK,IAAIC,KAAQ9B,KAAKlB,MAEdkB,KAAKlB,MAAMgD,aAAiBC,SAAsC,IAA5B/B,KAAKlB,MAAMgD,GAAM5C,UACvB,IAA7B4C,EAAKJ,QAAQ,WAEZC,EAAQX,KAAKhB,KAAKlB,MAAMgD,GAAM3C,OAEG,IAA7B2C,EAAKJ,QAAQ,aAEjBE,GAAc5B,KAAKlB,MAAMgD,GAAM3C,OAI3C,GAAIwC,EAAQlB,QAAU,EAElBT,KAAKC,SAAS,CAAER,QAAS,oCAF7B,CAMA,IADA,IAAMuC,EAAgBhC,KAAKoB,aAAaO,EAAQlB,OAAQT,KAAKlB,MAAME,gBAC1D2B,EAAI,EAAGA,EAAIgB,EAAQlB,OAAQE,IAEhC,IAAK,IAAIsB,EAAI,EAAGA,EAAID,EAAcrB,GAAIsB,IAElCJ,GAAY7B,KAAKwB,WAAWG,EAAQhB,GAAIgB,EAAQhB,GAAGF,OAAQmB,GAGnEC,EAAWA,EAASK,MAAM,IAAIC,MAAK,WAAW,MAAO,GAAItB,KAAKE,YAAWqB,KAAK,IAC9EpC,KAAKC,SAAS,CACVlB,gBAAiB8C,O,+BAIrB,OACI,oCACI,yBAAKQ,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,wBACX,0BAAMC,SAAUtC,KAAKJ,cACjB,yBAAKyC,UAAU,kBACX,2BAAOE,QAAQ,iBAAiBF,UAAU,2BAA1C,oBACA,yBAAKA,UAAU,YACX,4BAAQA,UAAU,eAAejC,MAAOJ,KAAKlB,MAAME,eAAgBwD,SAAUxC,KAAKN,aAAcQ,GAAG,kBAC/F,4BAAQE,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,SAIZ,yBAAKiC,UAAU,kBACX,yBAAKA,UAAU,YAAf,oBACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,cACP,2BAAOA,UAAU,mBACbtC,KAAK,WACLG,GAAG,iBACHG,QAASL,KAAKlB,MAAMG,eAAeC,OACnCsD,SAAUxC,KAAKN,eACnB,2BAAO2C,UAAU,mBAAmBE,QAAQ,kBAA5C,oBAIZ,yBAAKF,UAAU,kBACX,yBAAKA,UAAU,YAAf,oBACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,cACP,2BAAOA,UAAU,mBACbtC,KAAK,WACLG,GAAG,iBACHG,QAASL,KAAKlB,MAAMM,eAAeF,OACnCsD,SAAUxC,KAAKN,eACvB,2BAAO2C,UAAU,mBAAmBE,QAAQ,kBAA5C,sBAIR,yBAAKF,UAAU,kBACX,yBAAKA,UAAU,YAAf,iCACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,cACP,2BAAOA,UAAU,mBACbtC,KAAK,WACLG,GAAG,6BACHG,QAASL,KAAKlB,MAAMO,2BAA2BH,OAC/CsD,SAAUxC,KAAKN,eACvB,2BAAQ2C,UAAU,mBAAmBE,QAAQ,8BAA7C,wBAIR,yBAAKF,UAAU,kBACX,yBAAKA,UAAU,YAAf,iCACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,cACP,2BAAOA,UAAU,mBACbtC,KAAK,WACLG,GAAG,6BACHG,QAASL,KAAKlB,MAAMQ,2BAA2BJ,OAC/CsD,SAAUxC,KAAKN,eACvB,2BAAQ2C,UAAU,mBAAmBE,QAAQ,8BAA7C,wBAIR,yBAAKF,UAAU,kBACX,yBAAKA,UAAU,YAAf,+BACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,cACP,2BAAOA,UAAU,mBACbtC,KAAK,WACLG,GAAG,2BACHG,QAASL,KAAKlB,MAAMS,yBAAyBL,OAC7CsD,SAAUxC,KAAKN,eACvB,2BAAQ2C,UAAU,mBAAmBE,QAAQ,4BAA7C,mCAIR,yBAAKF,UAAU,kBACX,yBAAKA,UAAU,YAAf,iCACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,cACP,2BAAOA,UAAU,mBACbtC,KAAK,WACLG,GAAG,4BACHG,QAASL,KAAKlB,MAAMU,0BAA0BN,OAC9CsD,SAAUxC,KAAKN,eACvB,2BAAQ2C,UAAU,mBAAmBE,QAAQ,6BAA7C,IAA2E,0CAA3E,QAIR,yBAAKF,UAAU,kBACX,yBAAKA,UAAU,wBACX,2BAAOtC,KAAK,SAASsC,UAAU,iBAAiBjC,MAAM,sBACtD,6BACA,yBAAKiC,UAAU,oBAAoBrC,KAAKlB,MAAMW,WAGtD,yBAAK4C,UAAU,kBACX,yBAAKA,UAAU,YAAf,sBACA,yBAAKA,UAAU,YACX,2BAAOtC,KAAK,OAAOsC,UAAU,eAAeG,SAAUxC,KAAKN,aAAcU,MAAOJ,KAAKlB,MAAMC,gBAAiBmB,GAAG,+B,GAxO1HuC,IAAMC,YC+BpBC,MAtBf,WAGE,OACE,oCACE,kBAAC,EAAD,QCJcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnE,c","file":"static/js/main.03453b37.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nclass RandomPassword extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            yourNewPassword: '',\n            passwordLength: 8,\n            includeSymbols: {\n                status: true,\n                char: '@#$%{}[]()/\\\\\\'\"`~,;:.<>'\n            },\n            includeNumbers: {\n                status: true,\n                char: '0123456789'\n            },\n            includeLowercaseCharacters: {\n                status: true,\n                char: 'abcdefghijklmnopqrstuvwxyz'\n            },\n            includeUppercaseCharacters: {\n                status: true,\n                char: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            },\n            excludeSimilarCharacters: {\n                status: false,\n                char: 'il1Lo0O'\n            },\n            excludeAmbiguosCharacters: {\n                status: false,\n                char: '{}[]()/\\\\\\'\"`~,;:.<>'\n            },\n            message: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(event) {\n        const target = event.target;\n    \n        switch (target.type) {\n            case \"select-one\":\n                this.setState({ [target.id]: parseInt(event.target.value)  });\n                break;\n            case \"text\":\n                this.setState({ [target.id]: event.target.value  });\n                break;\n            case \"checkbox\":\n                this.setState(state => ({\n                    [target.id]: {\n                        ...state[target.id],\n                        status: target.checked\n                    }\n                }));\n                break;\n            default:\n                break;\n        }\n    }\n    handleSubmit(event) {\n        this.setState({ message: '' });\n        this.randomPassword();\n        event.preventDefault();\n    }\n    randomLength(num, length) {\n        let arrayNum = [];\n        for (let i = 0; i < num; i++)\n        {\n            let ran = 0;\n            while (ran < 1 || ran > 9) {\n                ran = Math.floor(Math.random() * 10);\n            }\n            arrayNum.push(ran);\n        }\n        let reduce = arrayNum.reduce((x, y) => x + y);\n        if (reduce !== length)\n            return this.randomLength(num, length);\n\n        return arrayNum;\n    }\n    randomChar(listChar, charLength, charExclude) {\n        const randomChar = listChar.charAt(Math.floor(Math.random() * charLength));\n        if (charExclude.length > 0 && charExclude.indexOf(randomChar) !== -1)\n            return this.randomChar(listChar, charLength, charExclude);\n        return randomChar;\n    }\n    randomPassword() {     \n        let addChar = [];\n        let removeChar = '';\n        let password = '';\n        for (let item in this.state)\n        {\n            if (this.state[item] instanceof Object && this.state[item].status === true) {\n                if(item.indexOf('include') !== -1)\n                {\n                    addChar.push(this.state[item].char);\n                }\n                else if(item.indexOf('exclude') !== -1)\n                {\n                    removeChar += this.state[item].char;\n                }\n            }    \n        }\n        if (addChar.length <= 0)\n        {\n            this.setState({ message: 'Select at least one option.' });\n            return;\n        }\n        const ranDomNumChar = this.randomLength(addChar.length, this.state.passwordLength);\n        for (let i = 0; i < addChar.length; i++)\n        {\n            for (let j = 0; j < ranDomNumChar[i]; j++)\n            {\n                password += this.randomChar(addChar[i], addChar[i].length, removeChar);\n            }\n        }\n        password = password.split('').sort(function(){return 0.5-Math.random()}).join('');\n        this.setState({\n            yourNewPassword: password\n        });\n    }\n    render() {\n        return (\n            <>\n                <div className=\"container mt-5\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 offset-md-2\">\n                            <form onSubmit={this.handleSubmit}>\n                                <div className=\"form-group row\">\n                                    <label htmlFor=\"passwordLength\" className=\"col-sm-3 col-form-label\">Password Length:</label>\n                                    <div className=\"col-sm-9\">\n                                        <select className=\"form-control\" value={this.state.passwordLength} onChange={this.handleChange} id=\"passwordLength\">\n                                            <option value=\"6\">6</option>\n                                            <option value=\"7\">7</option>\n                                            <option value=\"8\">8</option>\n                                            <option value=\"9\">9</option>\n                                            <option value=\"10\">10</option>\n                                            <option value=\"11\">11</option>\n                                            <option value=\"12\">12</option>\n                                            <option value=\"13\">13</option>\n                                            <option value=\"14\">14</option>\n                                            <option value=\"15\">15</option>\n                                            <option value=\"16\">16</option>\n                                        </select>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <div className=\"col-sm-3\">Include Symbols:</div>\n                                    <div className=\"col-sm-9\">\n                                    <div className=\"form-check\">\n                                            <input className=\"form-check-input\"\n                                                type=\"checkbox\"\n                                                id=\"includeSymbols\"\n                                                checked={this.state.includeSymbols.status}\n                                                onChange={this.handleChange} />\n                                            <label className=\"form-check-label\" htmlFor=\"includeSymbols\">( e.g. @#$% )</label>\n                                    </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <div className=\"col-sm-3\">Include Numbers:</div>\n                                    <div className=\"col-sm-9\">\n                                    <div className=\"form-check\">\n                                            <input className=\"form-check-input\"\n                                                type=\"checkbox\"\n                                                id=\"includeNumbers\"\n                                                checked={this.state.includeNumbers.status}\n                                                onChange={this.handleChange}/>\n                                        <label className=\"form-check-label\" htmlFor=\"includeNumbers\">( e.g. 123456 )</label>\n                                    </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <div className=\"col-sm-3\">Include Lowercase Characters:</div>\n                                    <div className=\"col-sm-9\">\n                                    <div className=\"form-check\">\n                                            <input className=\"form-check-input\"\n                                                type=\"checkbox\"\n                                                id=\"includeLowercaseCharacters\"\n                                                checked={this.state.includeLowercaseCharacters.status}\n                                                onChange={this.handleChange}/>\n                                        <label  className=\"form-check-label\" htmlFor=\"includeLowercaseCharacters\">( e.g. abcdefgh )</label>\n                                    </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <div className=\"col-sm-3\">Include Uppercase Characters:</div>\n                                    <div className=\"col-sm-9\">\n                                    <div className=\"form-check\">\n                                            <input className=\"form-check-input\"\n                                                type=\"checkbox\"\n                                                id=\"includeUppercaseCharacters\"\n                                                checked={this.state.includeUppercaseCharacters.status}\n                                                onChange={this.handleChange}/>\n                                        <label  className=\"form-check-label\" htmlFor=\"includeUppercaseCharacters\">( e.g. ABCDEFGH )</label>\n                                    </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <div className=\"col-sm-3\">Exclude Similar Characters:</div>\n                                    <div className=\"col-sm-9\">\n                                    <div className=\"form-check\">\n                                            <input className=\"form-check-input\"\n                                                type=\"checkbox\"\n                                                id=\"excludeSimilarCharacters\"\n                                                checked={this.state.excludeSimilarCharacters.status}\n                                                onChange={this.handleChange}/>\n                                        <label  className=\"form-check-label\" htmlFor=\"excludeSimilarCharacters\">( e.g. i, l, 1, L, o, 0, O )</label>\n                                    </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <div className=\"col-sm-3\">Exclude Ambiguous Characters:</div>\n                                    <div className=\"col-sm-9\">\n                                    <div className=\"form-check\">\n                                            <input className=\"form-check-input\"\n                                                type=\"checkbox\"\n                                                id=\"excludeAmbiguosCharacters\"\n                                                checked={this.state.excludeAmbiguosCharacters.status}\n                                                onChange={this.handleChange}/>\n                                        <label  className=\"form-check-label\" htmlFor=\"excludeAmbiguosCharacters\"> {\"( {} [ ] ( ) / \\\\ ' \\\" ` ~ , ; : . < >)\"} </label>\n                                    </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <div className=\"col-sm-9 offset-sm-3\">\n                                        <input type=\"submit\" className=\"btn btn-danger\" value=\"Generate Password\" />\n                                        <br />\n                                        <div className=\"text-danger mt-1\">{this.state.message}</div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <div className=\"col-sm-3\">Your New Password:</div>\n                                    <div className=\"col-sm-9\">\n                                        <input type=\"text\" className=\"form-control\" onChange={this.handleChange} value={this.state.yourNewPassword} id=\"yourNewPassword\" />\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\n\nexport default RandomPassword;","import React from 'react';\nimport './App.css';\n// import Test from './components/Test';\n// import EventHandle from './components/EventHandle';\n// import LoginController from './components/LoginController';\nimport RandomPassword from './components/RandomPassword';\n// import MouseOver from './components/MouseOver';\n// function Person({ name }) {\n//   // gets 'name' prop using object destructuring\n//   return <p>this person's name is: {name}</p>;\n// }\nfunction App() {\n  // const people = ['John', 'Bob', 'Fred'];\n  // can interpolate returned list of elements in {}\n  return (\n    <>\n      <RandomPassword />\n    </>\n    //  <ul>\n    //   {/* we're passing each array element as props */}\n    //     {people.map((person, index) => <Person key={index} name={person} />)}\n    // </ul>\n    //   <Test />\n    //   <EventHandle />\n    //   <LoginController />\n\n    //   <MouseOver />\n    //   </>\n  );\n}\n \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}